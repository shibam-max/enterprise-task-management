version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: task-management-postgres-prod
    environment:
      POSTGRES_DB: taskmanagement
      POSTGRES_USER: ${POSTGRES_USER:-taskuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-taskpass}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - task-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-taskuser} -d taskmanagement"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: task-management-redis-prod
    volumes:
      - redis_data_prod:/data
    networks:
      - task-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: task-management-kafka-prod
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - task-network-prod
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: task-management-zookeeper-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - task-network-prod
    restart: unless-stopped

  backend:
    image: task-management-backend:latest
    container_name: task-management-backend-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/taskmanagement
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-taskuser}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-taskpass}
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      JAVA_OPTS: "-Xmx512m -XX:+UseG1GC"
    networks:
      - task-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    image: task-management-frontend:latest
    container_name: task-management-frontend-prod
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://backend:8080/api
    ports:
      - "80:3000"
    networks:
      - task-network-prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  task-network-prod:
    driver: bridge